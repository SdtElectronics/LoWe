CPP=g++
CFLAGS=-std=c++11 -Wall -I. -IDeviceHandlers 
#CFLAGS=-std=c++11 -g3 -Wall -I. -IDeviceHandlers 
OUT=loweagent
OBJDIR=obj
OUTDIR=out
DH=DeviceHandlers/

_OBJ=loweagent.o DeviceHandler.o DeviceHandlerRegistry.o DeviceHandlerFactory.o ConfigHandler.o PidGuesser.o \
		ProgRuntimeHandler.o ProgRuntimeDispatcher.o SocketCommunicator.o DeviceProvisioner.o \
		ArgsParser.o CommunicatingDeviceHandler.o SigActions.o EvdevDeviceHandler.o \
		$(DH)DeviceHandlerCatchAll.o $(DH)DeviceHandlerFrameBuffer.o $(DH)DeviceHandlerTTY.o \
		$(DH)DeviceHandlerALSA.o \
		$(DH)DeviceHandlerEvMice.o $(DH)DeviceHandlerEvKeyboard.o \
		$(DH)FrameBufferTransporter.o $(DH)DeviceHandlerSysDirectory.o
OBJ=$(patsubst %,$(OBJDIR)/%,$(_OBJ))

INC=DeviceHandler.h DeviceHandlerFactory.h DeviceHandlerRegistry.h ConfigHandler.h PidGuesser.h \
		ProgRuntimeHandler.h ProgRuntimeDispatcher.h SocketCommunicator.h Log.h DeviceProvisioner.h \
		ArgsParser.h CommunicatingDeviceHandler.h SigActions.h EvdevDeviceHandler.h \
		$(DH)DeviceHandlerCatchAll.h $(DH)DeviceHandlerFrameBuffer.h $(DH)DeviceHandlerTTY.h \
		$(DH)DeviceHandlerALSA.h \
		$(DH)DeviceHandlerEvMice.h $(DH)DeviceHandlerEvKeyboard.h \
		$(DH)FrameBufferTransporter.h $(DH)DeviceHandlerSysDirectory.h

all: credirs build

$(OBJ): $(OBJDIR)/%.o: %.cpp $(INC) Makefile
	$(CPP) $< -c -o $@ $(CFLAGS)

credirs:
	mkdir -p $(OBJDIR)
	mkdir -p $(OBJDIR)/$(DH)
	mkdir -p $(OUTDIR)

build: $(OBJ)
	$(CPP) -o $(OUTDIR)/$(OUT) $^ -lconfig -lpthread
	cp loweagent.conf $(OUTDIR)

clean:
	rm -R -f $(OBJDIR)
	rm -R -f $(OUTDIR)

